import os
import sys
import re
import argparse
import ast


def dir_path(string):
    if os.path.isdir(string):
        return string
    else:
        raise NotADirectoryError(string)

parser = argparse.ArgumentParser(description='Sort the results from decoding by the different \
        parameters to make analysis a little easier')
parser.add_argument('resultsDir', type=dir_path,
        help='The result directory generated by decode_music.sh: results-mix-snrXX-lvXX-startXX.')
parser.add_argument('type', type=str,
        help='Either "char" or "word". Specifies the types of decoding results to sort')
parser.add_argument('testSet', type=str,
        help='Either "dev" or "eval", selecting WSJ "test_dev93" or "test_eval92" respectively to sort')

def parse_noise_utt_map(filepath, results={}, basepath=None):
    sorted_results = {}
    with open(filepath, 'r') as f:
        file_list_line = next(f).strip()
        file_list = ast.literal_eval(file_list_line)
        if basepath is not None:
            file_list = [file_.replace(basepath, '') for file_ in file_list]
        for line in f:
            uttId, noise_idx = line.split()
            noise_idx = int(noise_idx)
            noise_source = file_list[noise_idx]
            results[uttId]['noise_source'] = noise_source
            if noise_source not in sorted_results:
                sorted_results[noise_source] = {}
            sorted_results[noise_source][uttId] = results[uttId]
    return results, sorted_results


def parse_spk2gender(filepath, results={}):
    sorted_results = {}
    spk2gender = {}
    with open(filepath, 'r') as f:
        for line in f:
            speaker, gender = line.strip().split()
            spk2gender[speaker] = gender
    for uttId in results:
        gender = spk2gender[uttId[:3]]
        results[uttId]['gender'] = gender
        if gender not in sorted_results:
            sorted_results[gender] = {}
        sorted_results[gender][uttId] = results[uttId]
    return results, sorted_results


def parse_result_txt(filepath, results={}):
    sorted_results = {}
    with open(filepath, 'r') as f:
        while True:
            try:
                line = next(f)
                if line[:3] == 'id:':
                    match = re.search('^id: \((\d\w+)-([\d\w]+)\)', line)
                    speaker = match.group(1)
                    uttId = match.group(2)
                    results[uttId] = {'speaker': speaker}

                    Scores_line = next(f)
                    match = re.search('^Scores: \(#C #S #D #I\) (\d+) (\d+) (\d+) (\d+)', Scores_line)
                    results[uttId]['scores'] = {'correct': match.group(1),
                                               'substitution': match.group(2),
                                               'deletion': match.group(3),
                                               'insertion': match.group(4)}

                    REF_line = next(f)
                    # ref = re.search('^REF:  (.+)', REF_line).group(1).strip()
                    results[uttId]['reference'] = REF_line[6:].strip()

                    HYP_line = next(f)
                    # hyp = re.search('^HYP:  (.+)', HYP_line).group(1).strip()
                    results[uttId]['hypothesis'] = HYP_line[6:].strip()

                    Eval_line = next(f)
                    # eval = re.search('^Eval: (.+)', Eval_line).group(1).strip()
                    results[uttId]['evaluation'] = Eval_line[6:].strip()

                    if speaker not in sorted_results:
                        sorted_results[speaker] = {}
                    sorted_results[speaker][uttId] = results[uttId]

            except StopIteration:
                break

    return results, sorted_results


if __name__ == '__main__':

    args = parser.parse_args()

    test_sets = ['test_dev93', 'test_eval92']
    if args.testSet == 'dev':
        test_set = test_sets[0]
    elif args.testSet == 'eval':
        test_set = test_sets[1]

    decode_result_dir = lambda s: 'decode_{}_decode_lm_word65000'.format(s)
    if args.type == 'char':
        result_txt_path = os.path.join(args.resultsDir, decode_result_dir(test_set), 'result.txt')
    elif args.type == 'word':
        result_txt_path = os.path.join(args.resultsDir, decode_result_dir(test_set), 'result.wrd.txt')
    results, sorted_results_by_speaker = parse_result_txt(result_txt_path)

    noise_utt_map_file = lambda s: '{}_noise_utt_map'.format(s)
    noise_utt_map_path = os.path.join(args.resultsDir, noise_utt_map_file(test_set))
    results, sorted_results_by_noise = parse_noise_utt_map(noise_utt_map_path, results)
    
    spk2gender_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'espnet', 'egs',
            'wsj', 'asr1', 'data', test_set, 'spk2gender')
    results, sorted_results_by_gender  = parse_spk2gender(spk2gender_path, results)

    # TODO: What to do with output
